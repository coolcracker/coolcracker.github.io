---
title:  "CleanCode Challenge 14"
date:   2022-05-11 01:04:23
categories: [CleanCode]
tags: [CleanCode]
---
### 오늘 TIL 3줄 요약

- 클래스는 작아야 한다. (첫째도, 둘째도, 작아야 한다.)
- 단일 책임 원칙(Single Responsibility Principle) : 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다.
- 큰 함수를 작은 함수 여럿으로 쪼개다 보면 종종 작은 클래스 여럿으로 쪼갤 기회가 생긴다. 그러면서 프로그램에 점점 더 체계가 잡히고 구조가 투명해진다.

### TIL (Today I Learned)  날짜

- 22년 05월 10일~22년 05월 11일

### 오늘 읽은 범위

- 10장. 클래스

### 책에서 기억하고 싶은 내용을 써보세요.

p.172

클래스 체계

- 순서(추상화 단계가 순차적으로 내려감) : static public(정적 공개) 상수 → static private(정적 비공개) 변수 → 비공개 인스턴스 변수 → 공개 함수 → 비공개 함수
- 캡슐화 : 변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시 숨겨야 한다는 법칙도 없다. 때로는 변수나 유틸리티 함수를 protected로 선언해 테스트 코드에 접근을 허용하기도 한다. (같은 패키지 안에서 테스트 코드가 함수를 호출하거나 변수를 사용해야 한다면 그 함수나 변수를 protected로 선언하거나 패키지 전체로 공개한다. 하지만 그 전에 비공개 상태를 유지할 온갖 방법을 강구한다. 캡슐화를 풀어주는 결정은 언제나 최후의 수단이다.)

클래스는 작아야 한다. (첫째도, 둘째도, 작아야 한다.)

- 함수는 물리적인 행수로 크기를 측정
- 클래스는 맡은 책임으로 크기를 측정 (메서드 수가 크고 작고가 문제가 아니라 책임이 작아야 한다.)
- 클래스의 이름은 해당 클래스 책임을 기술해야 한다. (작명은 클래스 크기를 줄이는 첫번째 관문)
- 클래스에 대한 설명은 25단어 내외로 가능해야 한다.

p.175

단일 책임 원칙(Single Responsibility Principle) : 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다.

- 책임, 즉 변경할 이율르 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다.
- SRP는 객체 지향 설계에서 더욱 중요한 개념이다. (이상하게도 클래스 설계자가 가장 무시하는 규칙 중 하나이다)
- 문제는 우리들 대다수가 프로그램이 돌아가면 일이 끝났다고 여기는 데 있다. ‘깨끗하고 체계적인 소프트웨어"라는 다음 관심사로 전환하지 않는다.
- “도구 상자를 어떻게 관리하고 싶은가? 작은 서랍을 많이 두고 기능과 이름이 명확한 컴포넌트를 나눠 넣고 싶은가? 아니면 큰 서랍 몇 개를 두고 모두를 던져 넣고 싶은가?”
- 규모가 어느 수준에 이르는 시스템은 논리가 많고 복잡하다. 이런 복잡성을 다루려면 체계적인 정리가 필수이다. 그래야 개발자가 무엇이 어디에 있는지 쉽게 찾는다. 그래야 (변경을 가할 때) 직접 영향이 미치는 컴포넌트만 이해해도 충분하다. 큼직한 다목적 클래스 몇 개로 이뤄진 시스템은 (변경을 가할 때) 당장 알 필요가 없는 사실까지 들이밀어 독자를 방해한다. → 즉, 큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다.

p.177

응집도

- 클래스는 인스턴스 변수 수가 작아야 한다. 각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다. 일반적으로 메서드가 변수를 더 많이 사용할수록 메서드와 클래스는 응집도가 더 높다. 모든 인스턴스 변수를 메서드마다 사용하는 클래스는 응집도가 가장 높다.
- 일반적으로 이처럼 응집도가 가장 높은 클래스는 가능하지도 바람직하지도 않다. 그렇지만 우리는 응집도가 높은 클래스를 선호한다. 응집도가 높다는 말은 클래스에 속한 메서드와 변수가 서로 의존하며 논리적인 단위로 묶인다는 의미이기 때문이다.
- ‘함수를 작게, 매개변수 목록을 짧게’라는 전략을 따르다 보면 때때로 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아진다. 이는 십중팔구 새로운 클래스로 쪼개야 한다는 신호다. 응집도가 높아지도록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다.

p.178

응집도를 유지하면 작은 클래스 여럿이 나온다.

- 큰 함수를 작은 함수 여럿으로 쪼개다 보면 종종 작은 클래스 여럿으로 쪼갤 기회가 생긴다. 그러면서 프로그램에 점점 더 체계가 잡히고 구조가 투명해진다.

p.185

리팩터링 시 코드 길이가 늘어나는 이유

- 첫째, 리팩터링한 프로그램은 좀 더 길고 서술적인 변수 이름을 사용한다.
- 둘째, 리팩터링한 프로그램은 코드에 주석을 추가하는 수단으로 함수 선언과 클래스 선언을 활용한다.
- 셋째, 가독성을 높이고자 공백을 추가하고 형식을 맞추었다.

변경하기 쉬운 클래스

- 대다수 시스템은 지속적인 변경이 가해진다. 그리고 뭔가 변경할 때마다 시스템이 의도대로 동작하지 않을 위험이 따른다. 깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다.
- 클래스가 분리되면 코드는 순식간에 이해되고 특정 함수 수정 시 다른 함수에 대한 영향도가 사라지고 테스트 관점에서 모든 논리를 구석구석 증명하기도 쉬워진다.
- 새기능을 수정하거나 기존 기능을 변경할 때 건드릴 코드가 최소인 시스템 구조가 바람직하다. 이상적인 시스템이라면 새 기능을 추가할 때 시스템을 확장할 뿐 기존 코드를 변경하지 않는다.

p.190

변경으로부터의 격리

- 요구사항은 변햐기 마련이다. 따라서 코드도 변하기 마련이다.
- 객체 지향 프로그래밍에서 상세한 구현(코드)을 포함하는 구체적(concrete) 클래스와 개념만 포함하는 추상(abstract) 클래스가 있다. 상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다. 그래서 우리는 인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.
- 결합도가 낮다는 것은 각 시스템 요소가 다른 요소로부터 그리고 변경으로부터 잘 격리되어 있다는 의미이다.
    - 결합도가 낮으면 유연성과 재사용성이 더욱 높아진다.
    - DIP(Dependecy Invension Principle)를 따르는 클래스가 나온다. DIP는 추상화에 의존해야 한다는 원칙이다.

### 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

- 자바의 기초부터 공부를 해야겠다 ㅠ

#노마드코더 #북클럽 #노개북