---
title:  "CleanCode Challenge 11"
date:   2022-05-06 01:04:23
categories: [CleanCode]
tags: [CleanCode]
---
### 오늘 TIL 3줄 요약

- 뭔가 잘못되면 바로 잡을 책임은 바로 우리 프로그래머에게 있다.
- null을 반환하지도 전달하지도 말자.
- 깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 이 둘은 상충하는 목표가 아니다. 오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨긋한 코드를 작성할 수 있다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다.

### TIL (Today I Learned)  날짜

- 22년 05월 5일~22년 05월 6일

### 오늘 읽은 범위

- 7장. 오류처리

### 책에서 기억하고 싶은 내용을 써보세요.

p.130

- 뭔가 잘못되면 바로 잡을 책임은 바로 우리 프로그래머에게 있다.
- 오류코드보다 예외를 사용하라.

p.132

- Try-Catch-Finally 문부터 작성하라.
    - try 블록은 트랙잭션과 비슷하다. try 블록에서 무슨일이 생기든지 catch 블록은 프로그램 상태를 일관성 있게 유지해야 한다. 그러므로 예외가 발생할 코드를 짤 때는 try-catch-finally 문으로 시작하는 편이 낫다. 그러면 try 블록에서 무슨 일이 생기든지 호출자가 기대하는 상태를 정의하기 쉬워진다.

p.133

- 미확인(unchecked) 예외를 사용하라.
    - 최하위 함수를 변경해 새로운 오류를 던진다고 가정하면 최하위 단계에서 최상위 단계까지 연쇄적인 수정이 필요하다. throws 경로에 위차하는 모든 함수가 최하위 함수에서 던지는 예외를 알아야 하므로 캡슐화가 깨진다.

p.135

- 예외에 의미를 제공하라.
    - 예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다. 실패한 연산 이름과 실패 유형도 언급한다. 애플리케이션이 로깅 기능을 사용한다면 catch 블록에서 오류를 기록하도록 충분한 정보를 넘겨준다.
- 외부 API를 사용할 때는 감싸기 기법이 최선이다. 외부 API를 감싸면 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어든다. 나중에 다른 라이브러리로 갈아타도 비용이 적다. 또한 감싸기 클래스에서 외부 API를 호출하는 대신 테스트 코드를 넣어주는 방법으로 프로그램을 테스트화하기도 쉬워진다.

p.137

- 정상 흐름을 정의하라.
- 앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다.
- 중단이 적합하지 않은 사례에서는 클래스를 만들거나 객체를 조작해 특수 사례를 처리하는 “특수 사례 패턴(special case pattern)”으로 처리하는 방식을 사용해야한다. 그러면 클래스나 객체가 예외적인 상황을 캡슐화해서 처리하므로 클라이언트 코드가 예외적인 상황을 처리할 필요가 없어진다.

p.138

- null을 반환하지 마라. null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 어느 누구 하나라도 null 확인을 빼먹는다면 애플리케이션이 통제 불능에 빠질 수 있다.
- null 확인이 누락된 문제라고 볼 수도 있지만 실상은 null 확인이 너무 많아서 문제인 것이다.

p.140

- null을 전달하지 마라. 메서드에서 null 을 반환하는 방식도 나쁘지만 메서드로 null을 전달하는 방식은 더 나쁘다. 정상적인 인수로 null을 기대하는 API가 아니라면 메서드로 null을 전달하는 코드는 최대한 피한다.
- 인수값이 null 인지 판단하기 위해서는 assert문을 사용하여 InvalidArgumentException 예외를 처리하기도 한다.
- 대다수의 프로그래밍 언어는 호출자가 실수로 넘기는 null을 적절히 처리하는 방법이 없다. 그렇다면 애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다. 즉, 인수로 null이 넘어오면 코드에 문제가 있다는 말이다.
- 깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 이 둘은 상충하는 목표가 아니다. 오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨긋한 코드를 작성할 수 있다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다.

### 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

- 프로그래밍을 하면서 예외처리는 거의 해본적이 없었는데 추후 개발 시에는 예외처리를 꼭 해야겠다.

#노마드코더 #북클럽 #노개북